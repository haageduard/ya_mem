Не приходилось писать аллокаторы памяти, но после поверхностного знакомства с существующими типами аллокаторов мне показалось,
что здесь лучше всего подходить тип Pool Allocator. В данном типе как раз используется выделение блоков фиксированного размера
и так же его особождение целиком из статического пула. Отслеживание свободных блоков реализовано на основе битовых масок.

По-умолчанию библиотека собирается с отладкой. Уровень отладки и оптимизации настраиваются в cmake файлах под
каждую архитектуру отдельно.
В качестве RTOS выбрана FreeRTOS как самая популярная RTOS, а корректность работы библиотеки под управлением RTOS реализована
с помощью мьютекс-семафоров.

Реализация аллокатора представлена в виде статической библиотеки под архитектуры x86/64 и ARM Cortex M3.
Юнит-тесты представлены в директории test в файле main.c, а компиляция и запуск предоставлен bash-скриптом run.sh.

Проверьте и укажите необходимые значения для определений в cmake файлах архитектур:

YA_MEM_ALLOC_POOL_SIZE задает размер пула в байтах
YA_MEM_ALLOC_CHUNK_SIZE задает размер блока в байтах
YA_MEM_ALLOC_USE_RTOS включает поддержку FreeRTOS
YA_MEM_DEBUG управляет выводом отладочной информации библиотеки
